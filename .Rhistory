golem::set_golem_options()
usethis::use_mit_license( name = "Golem User" )
usethis::use_readme_rmd( open = FALSE )
usethis::use_news_md( open = FALSE )
golem::use_recommended_tests()
golem::use_recommended_deps()
getwd()
rstudioapi::navigateToFile( "dev/02_dev.R" )
?use_package()
remotes::install_github("JohnCoene/shinyscroll")
usethis::use_package( "shiny" )
usethis::use_package( "shinyMobile" )
usethis::use_package( "dplyr" )
usethis::use_package( "leaflet" )
use_dev_package("shinyMobile")
usethis::use_dev_package("shinyMobile")
usethis::use_dev_package("echarts4r")
usethis::use_dev_package("shinyscroll")
usethis::use_dev_package("waiter")
usethis::use_dev_package("sever")
library(waiter)
use_dev_package("waiter")
usethis::use_package( "witer" )
usethis::use_package( "waiter" )
usethis::use_package( "magrittr" )
usethis::use_package( "countup" )
usethis::use_package( "htmlwidgets" )
usethis::use_package( "sever" )
?NS()
library(leaflet.extras)
usethis::use_package( "leaflet.extras" )
golem::fill_desc(
pkg_name = "mobilequake", # The Name of the package containing the App
pkg_title = "Earthquake Tracker", # The Title of the package containing the App
pkg_description = "Earthquake Tracker.", # The Description of the package containing the App
author_first_name = "Serdar", # Your First Name
author_last_name = "Korur",  # Your Last Name
author_email = "serdar.korur@gmail.com",      # Your Email
repo_url = NULL # The (optional) URL of the GitHub Repo
)
usethis::use_test( "app" )
usethis::use_vignette("mobilequake")
golem::add_module( name = "map_module" )
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
mobilequake::run_app()
# Run the application
mobilequake::run_app()
golem::document_and_reload()
usethis::use_package( "thinkr" )
golem::document_and_reload()
# Run the application
mobilequake::run_app()
# Run the application
mobilequake::run_app()
library(shinyMobile)
# Run the application
mobilequake::run_app()
leafletOutput()
?leafletOutput()
library(shiny)
# Run the application
mobilequake::run_app()
library(leaflet)
# Run the application
mobilequake::run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
mobilequake::run_app()
usethis::use_package( "jsonlite" )
usethis::use_package( "htmltools" )
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
mobilequake::run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
mobilequake::run_app()
run_app <- function(...) {
with_golem_options(
app = shinyApp(ui = app_ui, server = app_server),
golem_opts = list(...)
)
}
# Run the application
mobilequake::run_app()
gc()
?test_check()
library(testthat)
?test_check()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
mobilequake::run_app()
install_github("korur/mobilequake")
devtools::install_github("korur/mobilequake")
# install.packages("devtools")
devtools::install_github("korur/mobilequake")
run_app()
df %>%
e_charts(time) %>%
e_bar(mag) %>%
e_axis_labels(x = "Date", y= "Magnitute") %>% # axis labels
e_title("Live Earthquakes") %>%  # Add title
e_theme("infographic") %>%  # theme
e_legend(right = 0) %>%  # move legend to the bottom
e_tooltip(trigger = "axis")  %>% #tooltip
e_visual_map(mag, scale = NULL)
library(echarts4r)
df %>%
e_charts(time) %>%
e_bar(mag) %>%
e_axis_labels(x = "Date", y= "Magnitute") %>% # axis labels
e_title("Live Earthquakes") %>%  # Add title
e_theme("infographic") %>%  # theme
e_legend(right = 0) %>%  # move legend to the bottom
e_tooltip(trigger = "axis")  %>% #tooltip
e_visual_map(mag, scale = NULL)
df
url <- ("https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.csv")
df <- readr::read_csv(url, col_types = readr::cols())
df
df %>%
e_charts(time) %>%
e_bar(mag) %>%
e_axis_labels(x = "Date", y= "Magnitute") %>% # axis labels
e_title("Live Earthquakes") %>%  # Add title
e_theme("infographic") %>%  # theme
e_legend(right = 0) %>%  # move legend to the bottom
e_tooltip(trigger = "axis")  %>% #tooltip
e_visual_map(mag, scale = NULL)
df %>% filter(mag > 5)
url <- ("https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.csv")
df <- readr::read_csv(url, col_types = readr::cols())
head(df$mag)
class(df$mag)
bigquakes <- df %>% filter(mag > 5)
bigquakes
bigquakes
bigquakes <- df %>% dplyr::filter(mag > 5)
bigquakes
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
install.packages("rtools")
install.packages("Rtools")
library(Rtools)
remotes::install_github("korur/mobilequake")
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
library(shinyscroll)
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
mobilequake::run_app()
mobilequake::run_app()
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
?f7Icon()
package_version("shinyMobile")
package.version("shinyMobile")
packageVersion("shinyMobile")
?f7Icon()
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
devtools::install_github("RinteRface/shinyMobile")
df
df %>%
e_charts(time) %>%
e_bar(mag) %>%
e_axis_labels(x = "Date", y= "Magnitute") %>% # axis labels
e_title("Live Earthquakes") %>%  # Add title
e_theme("infographic") %>%  # theme
e_legend(right = 0) %>%  # move legend to the bottom
e_tooltip(trigger = "axis")  %>% #tooltip
e_visual_map(mag, scale = NULL)
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
packageVersion("shinyMobile")
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
mobilequake::run_app()
mobilequake::run_app()
mobilequake::run_app()
source('~/workingdirectory/CoronaOutbreak/mobilequake/R/mod_map_module.R', echo=TRUE)
f7Card(
f7Slider(
inputId = ns("hours"),
label = HTML("<h5>","Show Earthquakes within selected hours","</h5>"),
max = 168,
min = 0,
value = 72,
scaleSteps = 7,
scaleSubSteps = 1,
scale = TRUE,
color = "orange",
labels = tagList(
f7Icon("circle", old=TRUE),
f7Icon("circle_fill", old=FALSE)
)
))
mobilequake::run_app()
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
library(mobilequake)
mobilequake::run_app()
f
mobilequake::run_app()
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
source('~/workingdirectory/CoronaOutbreak/mobilequake/R/mod_map_module.R', echo=TRUE)
mobilequake::run_app()
source('~/workingdirectory/CoronaOutbreak/mobilequake/R/mod_map_module.R', echo=TRUE)
mobilequake::run_app()
mobilequake::run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
mobilequake::run_app()
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
df %>%
e_charts(time) %>%
e_bar(mag) %>%
e_axis_labels(x = "Date", y= "Magnitute") %>% # axis labels
e_title("Live Earthquakes") %>%  # Add title
e_theme("infographic") %>%  # theme
e_legend(right = 0) %>%  # move legend to the bottom
e_tooltip(trigger = "axis")  %>% #tooltip
e_visual_map(mag, scale = NULL) %>% e_text_style(
color = "white"
)
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
echarts4r::e_theme()
?echarts4r::e_theme()
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
runApp()
runApp()
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
?e_legend()
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
?echarts4r::e_theme()
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
?ee_visual_map()
?e_visual_map()
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
?echarts4r::e_theme()
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
mtcars %>%
e_charts(mpg) %>%
e_scatter(wt, qsec, scale = e_scale) %>%
e_visual_map(qsec, scale = e_scale)
# dimension
# color according to y axis
mtcars %>%
e_charts(mpg) %>%
e_scatter(wt) %>%
e_visual_map(wt, dimension = 1)
# color according to x axis
mtcars %>%
e_charts(mpg) %>%
e_scatter(wt) %>%
e_visual_map(mpg, dimension = 0)
v <- LETTERS[1:10]
matrix <- data.frame(
x = sample(v, 300, replace = TRUE),
y = sample(v, 300, replace = TRUE),
z = rnorm(300, 10, 1),
color = rnorm(300, 10, 1),
size = rnorm(300, 10, 1),
stringsAsFactors = FALSE
) %>%
dplyr::group_by(x, y) %>%
dplyr::summarise(
z = sum(z),
color = sum(color),
size = sum(size)
) %>%
dplyr::ungroup()
matrix %>%
e_charts(x) %>%
e_scatter_3d(y, z, color, size) %>%
e_visual_map(
z, # scale to z
inRange = list(symbolSize = c(1, 30)), # scale size
dimension = 3 # third dimension 0 = x, y = 1, z = 2, size = 3
) %>%
e_visual_map(
z, # scale to z
inRange = list(color = c('#bf444c', '#d88273', '#f6efa6')), # scale colors
dimension = 4, # third dimension 0 = x, y = 1, z = 2, size = 3, color = 4
bottom = 300 # padding to avoid visual maps overlap
)
deaths_pal
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
?echarts4r::e_theme()
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
df %>%
e_charts(time) %>%
e_bar(mag) %>%
e_axis_labels(x = "Date", y= "Magnitute") %>% # axis labels
e_title("Live Earthquakes") %>%  # Add title
e_theme("halloween") %>%  # theme
e_legend(right = 0) %>%  # move legend to the bottom
e_tooltip(trigger = "axis")  %>% #tooltip
e_visual_map(mag, textStyle = list(color = "#fff"), scale = NULL)
df %>%
e_charts(time) %>%
e_bar(mag) %>%
e_axis_labels(x = "Date", y= "Magnitute") %>% # axis labels
e_title("Live Earthquakes") %>%  # Add title
e_theme("blue") %>%  # theme
e_legend(right = 0) %>%  # move legend to the bottom
e_tooltip(trigger = "axis")  %>% #tooltip
e_visual_map(mag, textStyle = list(color = "#fff"), scale = NULL)
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
df %>%
e_charts(time) %>%
e_bar(mag) %>%
e_axis_labels(x = "Date", y= "Magnitute") %>% # axis labels
e_title("Live Earthquakes") %>%  # Add title
e_theme("infographic") %>%  # theme
e_legend(right = 0) %>%  # move legend to the bottom
e_tooltip(trigger = "axis")  %>% #tooltip
e_visual_map(mag, scale = NULL) %>% e_text_style(
color = "white"
)
df %>%
e_charts(time) %>%
e_bar(mag) %>%
e_axis_labels(x = "Date", y= "Magnitute") %>% # axis labels
e_title("Live Earthquakes") %>%  # Add title
e_theme("halloween") %>%  # theme
e_legend(right = 0) %>%  # move legend to the bottom
e_tooltip(trigger = "axis")  %>% #tooltip
e_visual_map(mag, textStyle = list(color = "#fff"), scale = NULL)
df %>%
e_charts(time) %>%
e_bar(mag) %>%
e_axis_labels(x = "Date", y= "Magnitute") %>% # axis labels
e_title("Live Earthquakes") %>%  # Add title
e_theme("blue") %>%  # theme
e_legend(right = 0) %>%  # move legend to the bottom
e_tooltip(trigger = "axis")  %>% #tooltip
e_visual_map(mag, textStyle = list(color = "#fff"), scale = NULL)
runApp('~/workingdirectory/CoronaOutbreak/firstshinymobileapp/firstshinymobileapp')
mobilequake::run_app()
remotes::install_github("korur/mobilequake")
mobilequake::run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
mobilequake::run_app()
qc()
gc()
