# TEST modules # 1a

library(shiny)
library(DT)

# Module UI function
numInput <- function(id, label) {
  # Create a namespace function using the provided id
  ns <- NS(id)
  
  tagList(
    sliderInput(ns("hours"), label, 24, 168, value = 72)
  )
}

# Module server function

num <- function(input, output, session) {
  map <- reactive({
    url <- ("https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.csv")
    df <- readr::read_csv(url, col_types = readr::cols())
    # If no file is selected, don't do anything
    new.dt <- dt - as.difftime(input$hours, unit="hours")
    df <- df %>% dplyr::filter(time >= new.dt)
    
    df$size <- cut(df$mag,breaks = c(-Inf, 3.9, 4.9, 5.9, 6.9, 7.9, Inf),
                   labels=c("minor", "light", "moderate", "strong", "major", "great 8+"))
    
    # Create popup in HTML
    pop <- paste("<h3>",
                 "<b>Place:</b>", df$place, "<br>",
                 "<b>Time:</b>", df$time, "<br>",   # Format nicer
                 "<b>Mag:</b>", as.character(df$mag), "<br>",
                 "<b>Depth:</b>", as.character(df$depth), "km<br>", "</h3>"
    )
    
    # Create colour pallet
    col_rainbow<- c("#66ffff","#1aff1a","#f07900","#ff0000","#b30000","#b30059")
    pallet <- colorFactor(col_rainbow, df$size)
    
    map <- leaflet(df, options = leafletOptions(minZoom = 2)) %>% 
      
      addProviderTiles(providers$CartoDB.DarkMatter) %>%
      setView(100.65, 120.0285, zoom = 1) %>%
      setView(24, 10, zoom=2) %>%
      addCircles( ~longitude, ~latitude,  
                  weight= ~ifelse(mag < 4, 1, 6),
                  color= ~pallet(size),
                  radius = ~ifelse(mag < 4, 2, 5), # add ifs
                  popup = pop
      )    %>% 
      addLegend( "bottomright", pal = pallet,
                 values = sort(df$size),
                 title = "Magnitude")
  })
  return(map)
}

library(shiny)

ui <- fluidPage(
  sidebarLayout(
    sidebarPanel(
      numInput("hours", "size of dataframe")
    ),
    mainPanel(
      leafletOutput("table")
    )
  )
)

server <- function(input, output, session) {
  datafile <- callModule(num, "hours")
  
  output$table <- renderLeaflet({
    datafile()
  })
}

shinyApp(ui, server)

library(shiny)
library(shinyMobile)
library(leaflet)

# data preparation and functions
url <- ("https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.csv")
df <- readr::read_csv(url, col_types = readr::cols())


loader <- tagList(
  waiter::spin_loaders(42),
  br(),
  h3("Loading data")
)

ui <- function() {
  f7Page(
    sever::use_sever(),
    waiter::use_waiter(), # dependencies
    waiter::waiter_show_on_load(waiter::spin_3circles(), color = "#000000"),
    title = "Earthquake Tracker",
    dark_mode = TRUE,
    init = f7Init(
      skin = "auto", 
      theme = "dark"
    ),
    f7SingleLayout(
      navbar = f7Navbar(
        title = "Earthquake Tracker",
        hairline = TRUE,
        shadow = TRUE,
        left_panel = TRUE,
        right_panel = FALSE
      ), f7Card(
        f7Slider(
          inputId = "hours",
          label = HTML("<h5>","Show Earthquakes within selected hours","</h5>"),
          max = 168,
          min = 0,
          value = 72,
          scaleSteps = 7,
          scaleSubSteps = 1,
          scale = TRUE,
          color = "orange",
          labels = tagList(
            f7Icon("circle"),
            f7Icon("circle_fill")
          )
      )),  leafletOutput("distPlot") ) )
      
}
server <- function(input, output,session) {
  
  sever::sever(
    tagList(
      h1("Whoops!"),
      p("It looks like you were disconnected"),
      shiny::tags$button(
        "Reload",
        style = "color:#000;background-color:#fff;",
        class = "button button-raised",
        onClick = "location.reload();"
      )
    ),
    bg_color = "#000"
  )

  dt <- as.POSIXlt(Sys.time(), tz = "UTC")
  

  # Categorize magnitude in terms of size
  
  output$distPlot <- renderLeaflet({
   
    new.dt <- dt - as.difftime(input$hours, unit="hours")
    df <- df %>% dplyr::filter(time >= new.dt)
    
    df$size <- cut(df$mag,breaks = c(-Inf, 3.9, 4.9, 5.9, 6.9, 7.9, Inf),
                     labels=c("minor", "light", "moderate", "strong", "major", "great 8+"))
    
    # Create popup in HTML
    pop <- paste("<h3>",
      "<b>Place:</b>", df$place, "<br>",
      "<b>Time:</b>", df$time, "<br>",   # Format nicer
      "<b>Mag:</b>", as.character(df$mag), "<br>",
      "<b>Depth:</b>", as.character(df$depth), "km<br>", "</h3>"
    )
    
    # Create colour pallet
    col_rainbow<- c("#66ffff","#1aff1a","#f07900","#ff0000","#b30000","#b30059")
    pallet <- colorFactor(col_rainbow, df$size)
    
    leaflet(df, options = leafletOptions(minZoom = 2)) %>% 
      
      addProviderTiles(providers$CartoDB.DarkMatter) %>%
      setView(100.65, 120.0285, zoom = 1) %>%
      setView(24, 10, zoom=2) %>%
      addCircles( ~longitude, ~latitude,  
                  weight= ~ifelse(mag < 4, 1, 6),
                  color= ~pallet(size),
                  radius = ~ifelse(mag < 4, 2, 5), # add ifs
                  popup = pop
      )    %>% 
      addLegend( "bottomright", pal = pallet,
                 values = sort(df$size),
                 title = "Magnitude")
  })
  Sys.sleep(1.6)
  waiter::waiter_hide()
  }
shinyApp(ui = ui, server = server)




